#!/usr/bin/perl
#
# macdir-pw-read --- Read ldap and return json objects
#
# Copyright 2023-2024, CZ Software

use AppConfig qw(:argcount :expand);
use Carp;
use CZ::LDAPtools;
use Getopt::Long;
use JSON;
use Net::LDAPapi;
use Pod::Usage;
use strict;

my $CONF;
my $DEBUG_TIME = time();
my $LDAP;

my $opt_attrs;
my $opt_base;
my $opt_conf = '/etc/macdir/ldap.conf';
my $opt_debug;
my $opt_example;
my $opt_filter;
my $opt_help;
my $opt_manual;

##############################################################################
# Subroutines
##############################################################################

# ------------------------------------------------
# output debugging information

sub dbg {
    if (!$opt_debug) {
        return;
    }
    my ($tmp)   = @_;
    my $now     = time();
    my $elapsed = $now - $DEBUG_TIME;
    print {*STDOUT} "$now ($elapsed) $tmp \n"
      or croak("debugging print to STDOUT failed: $!");
    $DEBUG_TIME = $now;
    return;
}

#-------------------------------------------------------------------------
# standard output

sub msg {
    my ($msg) = @_;
    print {*STDOUT} "$msg\n" or croak("print to STDOUT failed: $!");
    return;
}

#-------------------------------------------------------------------------
# example conf file

sub example_conf {

    msg("# file: $opt_conf");
    msg('ldap_bindtype = gssapi|simple');
    msg('ldap_base = dc=ca-zephyr,dc=org');
    msg('ldap_host = localhost');
    msg('ldap_port = 389');
    msg('# ldap_password = somepassword');
    msg('# ldap_user = some-user-dn');

    return;
}

# ------------------------------------------------------------------------
# Read configuration properties

sub read_conf {
    my ($filename) = @_;

    if (!$filename) {
        $filename = $opt_conf;
    }

    my $conf = AppConfig->new({});
    $conf->define(
        'ldap_bindtype',
        {
            DEFAULT  => 'gssapi',
            ARGCOUNT => ARGCOUNT_ONE
        }
    );
    $conf->define(
        'ldap_base',
        {
            DEFAULT  => 'dc=ca-zephyr,dc=org',
            ARGCOUNT => ARGCOUNT_ONE
        }
    );
    $conf->define(
        'ldap_host',
        {
            DEFAULT  => 'localhost',
            ARGCOUNT => ARGCOUNT_ONE
        }
    );
    $conf->define(
        'ldap_port',
        {
            DEFAULT  => '389',
            ARGCOUNT => ARGCOUNT_ONE
        }
    );
    $conf->define('ldap_password', { ARGCOUNT => ARGCOUNT_ONE });
    $conf->define('ldap_user',     { ARGCOUNT => ARGCOUNT_ONE });

    if (-e $filename) {
        $conf->file($filename) or die "ERROR: problem reading $filename";
    } else {
        dbg("$filename not found");
    }

    if ($conf->ldap_host() =~ /,/xms) {
        my $one_host = lt_pool_host($conf->ldap_host);
        $conf->ldap_host($one_host);
    }

    return $conf;
}

# --------------------------------------------------------------------
# Search for a secret

sub link_search {
    my ($base, $filter, $attr_string) = @_;
    my @attrs = ();
    if (length($attr_string) > 0) {
        @attrs = split(/,/, $attr_string);
    }
    dbg("link search - base:$base filter:$filter attrs:$attr_string");
    my $msg = $LDAP->search_s(
        -basedn    => $base,
        -scope     => LDAP_SCOPE_SUBTREE,
        -filter    => $filter,
        -attrs     => [],
        -attrsonly => 0,
    );
    if ($opt_debug && $LDAP->errno != 0) {
        msg('errno: ' . $LDAP->errno . 'errstring:' . $LDAP->errstring);
        $LDAP->perror(
            "ERROR: problem searching using base:$base filter:$filter\n");
    }

    my %entries = %{ $LDAP->get_all_entries };
    my $json_text;
    if (scalar(%entries) > 0) {
        $json_text = encode_json(\%entries);
    }

    return $json_text;
}

##############################################################################
# Main routine
##############################################################################

# -- get options
GetOptions(
    'attrs=s'  => \$opt_attrs,
    'base=s'   => \$opt_base,
    'conf=s'   => \$opt_conf,
    'debug'    => \$opt_debug,
    'example'  => \$opt_example,
    'filter=s' => \$opt_filter,
    'help'     => \$opt_help,
    'manual'   => \$opt_manual
);

# -- Flush output immediately
local $| = 1;

# Display an example configuration file
if ($opt_example) {
    example_conf();
    exit;
}

if (defined($ARGV[0]) && $ARGV[0] eq 'help') {
    $opt_help = 1;
}
if (defined($ARGV[0]) && $ARGV[0] eq 'manual') {
    $opt_manual = 1;
}

# Display help if requested
if ($opt_help) {
    pod2usage(-verbose => 0);
}
if ($opt_manual) {
    pod2usage(-verbose => 2);
}

# Read the configuration file
dbg("Configuration file: $opt_conf");
$CONF = read_conf($opt_conf);

if ($CONF->ldap_bindtype eq 'simple') {
    $LDAP = lt_ldap_connect(
        {
            host     => $CONF->ldap_host,
            port     => $CONF->ldap_port,
            bindtype => $CONF->ldap_bindtype,
            user_dn  => $CONF->ldap_user,
            user_pw  => $CONF->ldap_password,
            debug    => $opt_debug
        }
    );
} else {
    $LDAP = lt_ldap_connect(
        {
            host     => $CONF->ldap_host,
            port     => $CONF->ldap_port,
            bindtype => $CONF->ldap_bindtype,
            debug    => $opt_debug
        }
    );
}

if (!$opt_base) {
    $opt_base = $CONF->ldap_base;
}

if (!$opt_filter) {
    msg('ERROR: required --filter switch is missing');
    exit 1;
}
if ($opt_filter !~ /=/) {
    msg("ERROR: bad filter ($opt_filter)");
    exit 1;
}

my $j = link_search($opt_base, $opt_filter, $opt_attrs);
msg($j);

$LDAP->unbind;

exit;

__END__

=head1 NAME

macdir-pw-read - Update PowerDNS entries in LDAP

=head1 SYNOPSIS

macdir-pw-read [read|help|manual] --filter=<filter> [--base=<dn>] \
    [--debug] [--help] [--manual]

=head1 DESCRIPTION

This script searches an ldap directory given a filter and returns the
entry as JSON.

=head1 ACTIONS

=over 4

=item help

Display a short help messsage.

=item manual

Display this documentation.

=back

=head1 SWITCHES

=over 4

=item --filter=<filter>

The filter must be a valid LDAP filter.  This switch is required.

=item --base <dn>

The base distinguished name to use for the ldap search.

=item --attrs=<csv list of attributes>

A list of attributes to return.  If not specificed then all attributes
are returned.

=item --example

Print an example configuration file to STDOUT.

=item --help

Display short help text.

=item --manual

Display the complete documentation.

=item --debug

Display debugging messages.

=back

=head1 EXAMPLES

=head2 Find all of Ned's entries in the directory.

    macdir-pw-read --base=dc=mrochek,dc=com --filter=uid=ned

=head1 AUTHOR

Bill MacAllister <bill@ca-zephyr.org>

=head1 COPYRIGHT

Copyright (C) 2023-2024, CZ Software

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut
