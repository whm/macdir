#!/usr/bin/perl
#
# macdir-pw-update --- Update an LDAP directory
#
# Copyright 2023-2024, CZ Software

use AppConfig qw(:argcount :expand);
use Carp;
use CZ::LDAPtools;
use Getopt::Long;
use Net::LDAPapi;
use Pod::Usage;
use strict;

my $CONF;
my $DEBUG_TIME = time();
my $LDAP;
my %VALID_ATTR = ();

my $opt_conf = '/etc/macdir/ldap.conf';
my $opt_debug;
my $opt_example;
my $opt_help;
my $opt_manual;
my $opt_owner;
my $opt_update;

##############################################################################
# Subroutines
##############################################################################

# ------------------------------------------------
# output debugging information

sub dbg {
    if (!$opt_debug) {
        return;
    }
    my ($tmp)   = @_;
    my $now     = time();
    my $elapsed = $now - $DEBUG_TIME;
    print {*STDOUT} "$now ($elapsed) $tmp \n"
      or croak("debugging print to STDOUT failed: $!");
    $DEBUG_TIME = $now;
    return;
}

#-------------------------------------------------------------------------
# standard output

sub msg {
    my ($msg) = @_;
    print {*STDOUT} "$msg\n" or croak("print to STDOUT failed: $!");
    return;
}

# ------------------------------------------------------------------------
# Read configuration properties

sub read_conf {
    my ($filename) = @_;

    if (!$filename) {
        $filename = $opt_conf;
    }

    my $conf = AppConfig->new({});
    $conf->define(
        'ldap_bindtype',
        {
            DEFAULT  => 'gssapi',
            ARGCOUNT => ARGCOUNT_ONE
        }
    );
    $conf->define(
        'ldap_base',
        {
            DEFAULT  => 'dc=ca-zephyr,dc=org',
            ARGCOUNT => ARGCOUNT_ONE
        }
    );
    $conf->define(
        'ldap_host',
        {
            DEFAULT  => 'localhost',
            ARGCOUNT => ARGCOUNT_ONE
        }
    );
    $conf->define(
        'ldap_port',
        {
            DEFAULT  => '389',
            ARGCOUNT => ARGCOUNT_ONE
        }
    );
    $conf->define('ldap_password', { ARGCOUNT => ARGCOUNT_ONE });
    $conf->define('ldap_user',     { ARGCOUNT => ARGCOUNT_ONE });

    if (-e $filename) {
        $conf->file($filename) or die "ERROR: problem reading $filename";
    }

    if ($conf->ldap_host() =~ /,/xms) {
        my $one_host = lt_pool_host($conf->ldap_host);
        $conf->ldap_host($one_host);
    }

    return $conf;
}

#-------------------------------------------------------------------------
# display an example configuration file

sub show_example_conf {

    msg("# file: $opt_conf");
    msg('ldap_bindtype = gssapi|simple');
    msg('ldap_base = dc=ca-zephyr,dc=org');
    msg('ldap_host = localhost');
    msg('ldap_port = 389');
    msg('# ldap_password = somepassword');
    msg('# ldap_user = some-user-dn');

    return;
}

#-------------------------------------------------------------------------
# Set the valid attribute hash

sub set_valid_attr_list {

    my $note_oc = 'czPersonNote';
    my $base    = 'cn=schema,cn=config';
    my $filter  = 'cn={*}ca-zephyr';
    my @attrs   = ('olcObjectClasses');
    dbg("schema search - base:$base filter:$filter");
    my $msg = $LDAP->search_s(
        -basedn    => $base,
        -scope     => LDAP_SCOPE_SUBTREE,
        -filter    => $filter,
        -attrs     => \@attrs,
        -attrsonly => 0,
    );
    if ($opt_debug && $LDAP->errno != 0) {
        msg('errno: ' . $LDAP->errno . 'errstring:' . $LDAP->errstring);
        $LDAP->perror(
            "ERROR: problem searching using base:$base filter:$filter\n");
    }

    my %entries = %{ $LDAP->get_all_entries };

    for my $dn (keys %entries) {
        for my $oc (@{ $entries{$dn}{'olcObjectClasses'} }) {
            my $this_name;
            my $this_must_may;
            if ($oc =~ /\s+ name\s+(\S+)/xmsi) {
                $this_name = $1;
                $this_name =~ s/'//xmsg;
            }
            for my $type (('may', 'must')) {
                if ($oc =~ /\s+ ($type)\s+ \( ([\S\s\$]+?) \)/xmsi) {
                    my $mm = $2;
                    if ($this_must_may) {
                        $this_must_may .= '$' . $mm;
                    } else {
                        $this_must_may = $mm;
                    }
                }
            }
            if (!$this_name || !$this_must_may) {
                next;
            }
            if (lc($this_name) eq lc($note_oc)) {
                my @a_list = split /\$/, $this_must_may;
                for my $a (@a_list) {
                    $a =~ s/\s+//xmsg;
                    $VALID_ATTR{ lc($a) } = 1;
                }
                last;
            }
        }
    }

    if ($opt_debug) {
        for my $a (sort keys %VALID_ATTR) {
            dbg("VALID_ATTR = $a");
        }
    }

    return;
}

#-------------------------------------------------------------------------
# Find user dn given either an owner or REMOTE_USER

sub find_user_dn {

    my $id;
    if ($ENV{'REMOTE_USER'}) {
        $id = $ENV{'REMOTE_USER'};
    } elsif ($opt_owner) {
        $id = $opt_owner;
    } else {
        msg('ERROR: --owner or REMOTE_USER must be present');
    }

    my $base;
    my $filter;
    my $scope;
    if ($id =~ /\@/xms) {
        $base   = $CONF->ldap_base;
        $scope  = LDAP_SCOPE_SUBTREE;
        $filter = "(&(objectClass=person)(krb5PrincipalName=$id))";
    } elsif ($id =~ /=/xms) {
        $base   = $id;
        $scope  = LDAP_SCOPE_BASE;
        $filter = '(objectClass=person)';
    } else {
        $base   = $CONF->ldap_base;
        $scope  = LDAP_SCOPE_SUBTREE;
        $filter = "(&(objectClass=person)(uid=$id))";
    }
    my @attrs       = ('objectClass');
    my $this_search = "base:$base filter:$filter scope:$scope";
    dbg($this_search);
    my $msg = $LDAP->search_s(
        -basedn    => $base,
        -scope     => $scope,
        -filter    => $filter,
        -attrs     => \@attrs,
        -attrsonly => 0,
    );
    if ($opt_debug && $LDAP->errno != 0) {
        msg('errno: ' . $LDAP->errno . 'errstring:' . $LDAP->errstring);
        $LDAP->perror("ERROR: problem searching using $this_search\n");
    }

    my %entries = %{ $LDAP->get_all_entries };

    if (scalar(keys %entries) > 1) {
        msg("ERROR: ambigious entry $this_search");
        return;
    }
    my $this_dn;
    for my $dn (keys %entries) {
        $this_dn = $dn;
    }
    dbg("user dn:$this_dn");
    return $this_dn;
}

#-------------------------------------------------------------------------
# Add an entry

sub add_pw {
    my ($cn, $av_ref) = @_;

    my $user_base = find_user_dn();
    if (!$user_base) {
        exit 1;
    }
    my $dn      = "cn=$cn,$user_base";
    my @av_list = @{$av_ref};

    my %ldap_av = (
        'objectClass' => ['top', 'czPersonNote'],
        'cn'          => [$cn],
    );
    my $err = '';
    for my $av (@av_list) {
        if ($av =~ /^([a-zA-Z0-9]+)=(.*)/xms) {
            my $a = lc($1);
            my $v = $2;
            if (!$VALID_ATTR{$a}) {
                $err .= "ERROR: invalid attribute $a\n";
                next;
            }
            push @{ $ldap_av{$a} }, $v;
        } else {
            $err .= "ERROR: invalid attrbute=value expression\n";
            next;
        }
    }
    my $v_attr = 'labeledUriVisibility';
    if (!$ldap_av{$v_attr}) {
        $ldap_av{$v_attr} = ['Y'];
    }

    if ($opt_update) {
        msg("Adding entry: $cn");
        my $status = $LDAP->add_s($dn, \%ldap_av);

        if ($status != 0) {
            msg("status: $status");
            msg('errno:' . $LDAP->errno . ' errstring:' . $LDAP->errstring);
            $LDAP->perror("ERROR: problem adding $dn\n");
            exit 1;
        }
    } else {
        msg("Proposing to add $dn");
    }

    return;
}

# --------------------------------------------------------------------
# Update a password entry

sub update_pw {
    my ($cn, $vals_ref) = @_;
    my @vals = @{$vals_ref};

    my $user_base = find_user_dn();
    if (!$user_base) {
        exit 1;
    }

    # Get current attribute values
    my $note_oc = 'czPersonNote';
    my $base    = $user_base;
    my $filter  = "(cn=$cn)";
    my @attrs   = ();
    dbg("user search - base:$base filter:$filter");
    my $msg = $LDAP->search_s(
        -basedn    => $base,
        -scope     => LDAP_SCOPE_SUBTREE,
        -filter    => $filter,
        -attrs     => \@attrs,
        -attrsonly => 0,
    );
    if ($opt_debug && $LDAP->errno != 0) {
        msg('errno: ' . $LDAP->errno . 'errstring:' . $LDAP->errstring);
        $LDAP->perror(
            "ERROR: problem searching using base:$base filter:$filter\n");
    }

    my %entries = %{ $LDAP->get_all_entries };
    my $cnt_dn  = scalar(keys %entries);
    if ($cnt_dn < 1) {
        msg("ERROR: $cn not found");
        return;
    }
    if ($opt_debug) {
        for my $dn (keys %entries) {
            dbg($dn);
            for my $attr (keys %{ $entries{$dn} }) {
                dbg("  $attr");
                for my $val (@{ $entries{$dn}{$attr} }) {
                    dbg("    $val");
                }
            }
        }
    }

    for my $dn (keys %entries) {
        my %ldap_mods = ();
        my $update_msg;
        my $err_flag;
        for my $attr_mod (@vals) {
            my $a;
            my $v;
            my $action;
            if ($attr_mod =~ /^([a-zA-Z0-9]+)([=\/])(.*)/xms) {
                $a      = lc($1);
                $action = $2;
                $v      = $3;
            } else {
                msg("ERROR: invalid update specification $attr_mod");
                $err_flag += 1;
                next;
            }
            if (!$VALID_ATTR{$a}) {
                msg("ERROR: invalid attribute $a");
                $err_flag += 1;
                next;
            }
            if ($action eq '=') {
                if (!$v) {
                    msg("ERROR: no value specified for $a");
                    $err_flag += 1;
                    next;
                }
                if ($entries{$dn}{$a}[0]) {
                    if ($entries{$dn}{$a}[0] eq $v) {
                        msg("INFO: $a already set to $v");
                    } else {
                        $ldap_mods{$a} = { 'r', [$v] };
                        $update_msg .= "Setting $a = $v\n";
                    }
                    next;
                } else {
                    $ldap_mods{$a} = { 'a', [$v] };
                    $update_msg .= "Adding $a = $v\n";
                }
            } elsif ($action eq '/') {
                my $del_cnt;
                for my $old_val ($entries{$dn}{$a}) {
                    if (!$v) {
                        $ldap_mods{$a} = { 'd', [$old_val] };
                        $update_msg .= "Deleting $a = $v\n";
                        $del_cnt += 1;
                    } else {
                        if ($old_val eq $v) {
                            $ldap_mods{$a} = { 'd', [$v] };
                            $update_msg .= "Deleting $a = $v\n";
                            $del_cnt += 1;
                        }
                    }
                }
                if (!$del_cnt) {
                    msg("INFO: Nothing found to delete for $a");
                }
            } else {
                msg("ERROR: invalid action $action");
            }
        }
        if ($err_flag) {
            msg("INFO: $err_flag encountered");
            msg("ERROR: update of $cn abandoned");
            return;
        }
        if ($opt_update) {
            msg("Updating $cn\n");
            msg($update_msg);
            $LDAP->modify_s($dn, \%ldap_mods);
            if ($LDAP->errno != 0) {
                msg(    'errno: '
                      . $LDAP->errno
                      . 'errstring:'
                      . $LDAP->errstring);
                $LDAP->perror("ERROR: problem updating $dn\n");
            }
        } else {
            msg("Proposing to update $dn");
            msg('Proposed updates:');
            msg($update_msg);
        }
    }

    return;
}

# --------------------------------------------------------------------
# Delete pw entry

sub delete_pw {
    my ($cn) = @_;
    my $user_base = find_user_dn();
    if (!$user_base) {
        exit 1;
    }

    my $dn = "cn=$cn,$user_base";

    msg("Deleting $dn\n");
    if ($opt_update) {
        my $status = $LDAP->delete_s($dn);
        if ($status != 0) {
            msg("status: $status\n");
            msg('errno:' . $LDAP->errno . ' errstring:' . $LDAP->errstring);
            $LDAP->perror("ERROR: problem deleting $dn\n");
            exit 1;
        }
    } else {
        msg("Proposing to delete $dn");
    }

    return;
}

##############################################################################
# Main routine
##############################################################################

# -- get options
GetOptions(
    'conf=s'  => \$opt_conf,
    'debug'   => \$opt_debug,
    'example' => \$opt_example,
    'help'    => \$opt_help,
    'manual'  => \$opt_manual,
    'owner=s' => \$opt_owner,
    'update'  => \$opt_update
);

# -- Flush output immediately
local $| = 1;

# Display an example configuration file
if ($opt_example) {
    show_example_conf();
    exit;
}

if (!scalar(@ARGV) || $ARGV[0] eq 'help') {
    $opt_help = 1;
}
if ($ARGV[0] eq 'manual') {
    $opt_manual = 1;
}

# Display help if requested
if ($opt_help) {
    pod2usage(-verbose => 0);
}
if ($opt_manual) {
    pod2usage(-verbose => 2);
}

# Read the configuration file
dbg("Configuration file: $opt_conf");
$CONF = read_conf($opt_conf);

if ($CONF->ldap_bindtype eq 'simple') {
    $LDAP = lt_ldap_connect(
        {
            host     => $CONF->ldap_host,
            port     => $CONF->ldap_port,
            bindtype => $CONF->ldap_bindtype,
            user_dn  => $CONF->ldap_user,
            user_pw  => $CONF->ldap_password,
            debug    => $opt_debug
        }
    );
} else {
    $LDAP = lt_ldap_connect(
        {
            host     => $CONF->ldap_host,
            port     => $CONF->ldap_port,
            bindtype => $CONF->ldap_bindtype,
            debug    => $opt_debug
        }
    );
}

set_valid_attr_list();

my $action = shift(@ARGV);
if (!$action) {
    msg('ERROR: Missing action');
    exit 1;
}
my $cn = shift(@ARGV);
if (!$cn) {
    msg('ERROR: Missing common name');
    exit 1;
}

dbg("action: $action");
dbg("cn: $cn");
if ($action =~ /^add$/xmsi) {
    my @vals = @ARGV;
    add_pw($cn, \@vals);
} elsif ($action =~ /^update$/xmsi) {
    my @updates = @ARGV;
    update_pw($cn, \@updates);
} elsif ($action =~ /^delete$/xmsi) {
    delete_pw($cn);
} else {
    msg("ERROR: action '$action' unknown");
    exit 1;
}

$LDAP->unbind;

exit;

__END__

=head1 NAME

macdir-pw-update - Update person entries in LDAP

=head1 SYNOPSIS

macdir-pw-update add|update|delete <cn> <attr>(=/)<val> \
     [<attr>(=/)<val>] [options]

=head1 DESCRIPTION

Add, update, and delete LDAP entries.

The updates rely on the environment variable REMOTE_USER to construct
the distinguished name (DN) to update.  If the REMOTE_USER contains an
'@' then it is assumed to be a Kerberos principal and a search is
performed to find the user's DN.  Otherwise the REMOTE_USER is used to
perform an LDAP search using the filter of the form
(&(uid=<REMOTE_USR>)(objectclass=person)).

One the user base DN is established updates are performed to the DN
cn=<command line cn>,<user base dn>.

=head1 ACTIONS

=over 4

=item add cn <attr=val> [<attr=val>]

Add an entry to the directory.

=item update cn attr(=/)val

Update existing entries in the directory.

Values to be added are specified as attr=val.  If the attribute is
single valued the existing value will be replaced otherwise the attribute
is added to the existing entry.

Values to be deleted are specified as attr/val or just attr/.  If no
value is spefified then all values are deleted.

=item delete cn

Delete an entry from the directory.

=back

=head1 OPTIONS

=over 4

=item --conf=<file path>

The configuration file to use.  The default path is
/etc/macdir/ldap.conf.  See --example for documentation of value
configuration file entries.

=item --debug

Display debugging messages.

=item --example

Print an example configuration file to STDOUT.

=item --help

Display short help text.

=item --manual

Display the complete documentation.

=item --update

Perform the updates.  The default is to show what will be updated without
changing anything.

=back

=head1 EXAMPLES

=head2 Add an entry

    macdir-pw-update add router \
        "description=Ned's Router Password" czCredential=somesecret \
        --update

=head2 Show what updates will be performed

    macdir-pw-update update router \
        czCredential/ \
        czCredential=newsecret \
        --update

=head2 Delete an entry

    macdir-pw-update delete router --update

=head1 AUTHOR

Bill MacAllister <bill@ca-zephyr.org>

=head1 COPYRIGHT

Copyright (C) 2023-2024, CZ Software

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut
